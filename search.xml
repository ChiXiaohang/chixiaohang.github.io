<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MATLAB工具箱控制器参数自整定</title>
    <url>/2021/10/06/MATLAB%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%82%E6%95%B0%E8%87%AA%E6%95%B4%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="引言">引言</h2>
<blockquote>
<p>在控制系统设计过程中，控制器的参数整定是最为繁琐的步骤之一，且有时找不到适当通用的方法进行调节，只能凭借经验不断改变参数，使输出达到相对理想的控制状态。MATLAB的工具箱可以很好的解决一些简单的控制系统的参数整定问题，大大节省我们的工作时间，提高工作效率。</p>
</blockquote>
<h2 id="工具">工具</h2>
<ul>
<li>MATLAB 2021b</li>
<li>工具箱(Toolbox) : Control System Tuner</li>
<li>手🙌</li>
</ul>
<h2 id="模型">模型</h2>
<p>以串联PID控制器为例：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314175923757.png"></p>
<p>如图搭建PID仿真模型，其中PID参数随意。</p>
<h3 id="参数自整定">参数自整定</h3>
<h4 id="设置待自适应调节simulink模型的io点即输入和输出"><strong>设置待自适应调节Simulink模型的IO点，即输入和输出：</strong></h4>
<img data-src="/2021/10/06/MATLAB%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%82%E6%95%B0%E8%87%AA%E6%95%B4%E5%AE%9A/image-20220314212241535-16472645029509.png" class>
<img data-src="/2021/10/06/MATLAB%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%82%E6%95%B0%E8%87%AA%E6%95%B4%E5%AE%9A/image-20220314212648566-164726451388511.png" class>
<h4 id="利用control-system-tuner进行pid参数自整定"><strong>利用Control
System Tuner进行PID参数自整定</strong></h4>
<p>在菜单工具栏选择<code>APP</code>-&gt;<code>控制系统调节器</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314213702954.png"></p>
<p>选择<code>New Plot</code>-&gt;<code>New Step</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314214012317.png"></p>
<p>在弹窗中指定系统的输入和输出信号，点击<code>Plot</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314214709794.png"></p>
<p>单击<code>TUNING</code>-&gt;<code>New Goal</code>-&gt;
<code>Tracking of step commands</code>设计自整定后的单位阶跃响应参数，完成后点击<code>Apply</code></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314215440773.png" alt="image-20220314215440773">
<figcaption aria-hidden="true">image-20220314215440773</figcaption>
</figure>
<p>然后，添加需要整定的控制器模块，我们这里选择PID controller.</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314220248031.png"></p>
<p>最后，点击<code>Tune</code>,PID控制器的参数就能按照设定的输出响应计算参数</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314220839382.png" alt="image-20220314220839382">
<figcaption aria-hidden="true">image-20220314220839382</figcaption>
</figure>
<p>返回
<code>CONTROL SYSTEM</code>,点击<code>Update Blocks</code>将计算得到的PID参数传递给Simulink模型中</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314221032044.png"></p>
<h4 id="整定效果"><strong>整定效果</strong></h4>
<p>整定完成后，运行Simulink模型，结果如图所示，与上述整定计算一致。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220314221545800.png"></p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
  </entry>
  <entry>
    <title>Python网页自动化下载</title>
    <url>/2022/03/02/Python%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<blockquote>
<p>背景：ST意法半导体官方社区一一直有积分兑换的活动，可以免费兑换开发板等礼品(一般需要10000以上积分才可以兑换)。以前也兑换过一块STM32L476G的板子，最近登录账号发现只剩下80积分，但是社区是可以通过下载资源文件增加积分的，下载一次参考手册之类的技术文档大概会增加10点积分，每天的积分增加上限为300积分。作为一个理工学生，自然是不能一个一个点击下载获取积分的，于是就有了下边的操作：</p>
</blockquote>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=937618217&amp;bvid=BV1iT4y1i7yF&amp;cid=559764593&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;">
</iframe>
</div>
<p>Python自动化测试的具体流程等我有时间再整理贴上来，代码近期会上传Github.</p>
<p><img data-src="https://s2.loli.net/2022/03/27/iLegrRPqph5xWVk.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-爬取考研调剂信息</title>
    <url>/2022/03/05/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<blockquote>
<p>此程序是2022考研调剂数据的爬取程序，爬取对象是小木虫论坛的考研区，为了方便之后的数据管理，爬取到的数据上传到了MongoDB数据库，后续可以将数据导出到Excel中查看。</p>
</blockquote>
<h2 id="安装mongodb">安装MongoDB</h2>
<p>MongoDB 提供了可用于 32 位和 64
位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB
预编译二进制包<a href="https://www.mongodb.com/download-center/community">下载地址</a></p>
<p><img data-src="https://s2.loli.net/2022/03/15/GlHNoq2XpknW7LK.png"></p>
<p>安装过程中，勾选<code>"install mongoDB compass"</code>,MongoDB
Compass 是一个图形界面管理工具,方便后续的数据管理。</p>
<p>安装完成后，将MongoDB和MongoDB Compass添加环境变量</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">D:\MongoDB\Server\5.0\bin</span><span class="dt">\</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">D:\mongodb-compass</span><span class="dt">\</span></span></code></pre></div>
<h2 id="小木虫官网">小木虫官网</h2>
<p><img data-src="https://s2.loli.net/2022/03/15/9sX2akfwBuUEtGD.png"></p>
<h2 id="爬虫核心程序">爬虫核心程序</h2>
<p>爬虫核心部分，该程序使主要用requests和BeautifulSoup库来完成网页端数据的爬取工作。完整代码见<a href="https://github.com/ChiXiaohang/2022PEE_SPYDER">Github</a>.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> bs4 <span class="im">import</span> BeautifulSoup</span></code></pre></div>
<p>requests用于将链接转化成html语言，而BeautifulSoup则用于查找需要的内容。通过采用<code>soup.select()</code>方法，可以得到所需的内容。
其中关键点在于，对于所需内容的精准定位，通过<code>()</code>内的语句来实现：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    res <span class="op">=</span> requests.get(url,headers<span class="op">=</span>headers,verify<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 利用BeautifulSoup库，精准定位需要爬取的内容，无需正则表达式</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    soup <span class="op">=</span> BeautifulSoup(res.text, <span class="st">&#39;lxml&#39;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 获取帖子的title信息，包含帖子名称和链接</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    titles <span class="op">=</span> soup.select(<span class="st">&#39;.forum_body_manage .xmc_lp20&#39;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 获取其他信息</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    colleges <span class="op">=</span> soup.select(<span class="st">&#39;.forum_body_manage .xmc_lp20+ td&#39;</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    majors <span class="op">=</span> soup.select(<span class="st">&#39;.forum_body_manage td:nth-child(3)&#39;</span>)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    nums <span class="op">=</span> soup.select(<span class="st">&#39;.forum_body_manage td:nth-child(4)&#39;</span>)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    times <span class="op">=</span> soup.select(<span class="st">&#39;.forum_body_manage td:nth-child(5)&#39;</span>)</span></code></pre></div>
<p><img data-src="https://s2.loli.net/2022/03/15/gk6WVpIdsClAJcZ.png"></p>
<h2 id="使用方法">使用方法</h2>
<p>上述配置完成后，运行代码，如图所示：</p>
<figure>
<img data-src="https://s2.loli.net/2022/03/15/KkUY5JzZjCGPByT.png" alt="image-20220315130539300">
<figcaption aria-hidden="true">image-20220315130539300</figcaption>
</figure>
<p>然后启动MongoDB服务器，在命令终端输入：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">mongod</span></span></code></pre></div>
<p><img data-src="https://s2.loli.net/2022/03/15/mAXdPuDwTIsOHEW.png"></p>
<p>再次在终端输入</p>
<pre class="shell"><code>mongodbcompass</code></pre>
<p>启动MongoDB compass,点击connect</p>
<p><img data-src="https://s2.loli.net/2022/03/15/h5XoHGLTAzlRnqY.png"></p>
<p>在界面左侧即能够看到爬取到的数据已经被上传到数据库中</p>
<p><img data-src="https://s2.loli.net/2022/03/15/XIYaBd2nq3rPmvu.png"></p>
<p>将数据导出到Excel如图所示：</p>
<p><img data-src="https://s2.loli.net/2022/03/15/cwVAjkHpXxRMNzu.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂Simulink模型转化为传递函数的方法</title>
    <url>/2022/01/06/Simulink%E6%A8%A1%E5%9E%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>在Simulink控制系统建模过程中，通常我们需要查看系统的单位阶跃响应、伯德图、根轨迹等特性，虽然部分特性通过Simulink的功能模块也能够实时的显示，但是远不及代码形式的模型便于操作和查看特性相关的变量。因此，若能够将Simulink模型导入工作空间，既能够利用Simulink模块化建模的优势，又能够结合Matlab脚本文件实现各种中间操作。</p>
</blockquote>
<p>该方法适合线性系统与非线性系统，以LADRC电力系统模型单位阶跃响应为例：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307092433295.png"></p>
<h4 id="该系统为线性系统不包含非线性环节给定参数后该系统的单位阶跃响应如下图所示">该系统为线性系统，不包含非线性环节，给定参数后，该系统的单位阶跃响应如下图所示：</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307094430446.png"></p>
<p>接下来我们将Simulink模型导入到工作空间</p>
<p>首先，给Simulink模型的输入添加Input Perturbation点</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307095129203.png"></p>
<p>同样输出处添加Output Measurement点</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307095430662.png"></p>
<p>然后新建脚本程序文件，开始写代码将模型转换为传递函数</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode matlab"><code class="sourceCode matlab"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="va">model_name</span> <span class="op">=</span> <span class="ss">&#39;power_sys&#39;</span><span class="op">;</span>  <span class="co">%加载simulink模型，即“power_sys.mdl”文件</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="va">model</span> <span class="op">=</span> <span class="va">model_name</span><span class="op">;</span>  </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="va">io</span> <span class="op">=</span> <span class="va">getlinio</span>(<span class="va">model</span>)<span class="op">;</span>      <span class="co">%获取模型输入输出信号</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="va">op</span> <span class="op">=</span> <span class="va">operpoint</span>(<span class="va">model</span>)<span class="op">;</span>     <span class="co">%创建工作点</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="va">open_sys</span> <span class="op">=</span> <span class="va">linearize</span>(<span class="va">model</span><span class="op">,</span><span class="va">io</span><span class="op">,</span><span class="va">op</span>)<span class="op">;</span>   <span class="co">%计算系统在该工作点的线性模型，此时得到的是状态方程向量</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>[<span class="va">num</span><span class="op">,</span><span class="va">den</span>]<span class="op">=</span><span class="va">tfdata</span>(<span class="va">open_sys</span><span class="op">,</span><span class="ss">&#39;v&#39;</span>)      <span class="co">%将状态方程转换为传递函数的形式</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="va">Trans_function</span><span class="op">=</span> <span class="va">tf</span>(<span class="va">num</span><span class="op">,</span><span class="va">den</span>)</span></code></pre></div>
<p>得到传递函数：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307100524196.png"></p>
<p>该传递函数的单位阶跃响应为：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image16466188971720.png"></p>
<p>与simulink模型的单位时间阶跃响应一致。</p>
<h4 id="若系统包含非线性环节例如">若系统包含非线性环节，例如：</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307100715384.png"></p>
<p>同样为LADRC电力系统模型，增加了死区的非线性环节，以上述同样步骤得到传递函数：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307101527369.png"></p>
<p>以及同样的单位阶跃输出响应：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220307101433444.png"></p>
<p>伯德图同样也可以获取到，且结果一致。</p>
<img data-src="/2022/01/06/Simulink%E6%A8%A1%E5%9E%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0/image-20220307101807894.png" class>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
  </entry>
  <entry>
    <title>抑制过拟合方法I-权重衰退</title>
    <url>/2022/01/08/%E6%8A%91%E5%88%B6%E8%BF%87%E6%8B%9F%E5%90%88%E6%96%B9%E6%B3%95I-%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80/</url>
    <content><![CDATA[<blockquote>
<p>训练过拟合是当模型样本较少或者参数过多，网络深度过大时，最终的训练结果和验证效果差异较大，模型在验证集上无法达到理想的效果，因此可以采用一些方法或引入新的超参数抑制过拟合的发生。</p>
</blockquote>
<h2 id="原理">原理</h2>
<h3 id="推导">推导</h3>
<p>权重衰退（weight decay）
是一种常用的应对过拟合的方法，通过为模型损失函数添加<span class="math inline">\(L2\)</span>范数惩罚项使得模型在更新参数权重发生衰减，从而减少过拟合情况的发生。通过限制参数值的选择范围来控制模型的容量。</p>
<p>假设目标函数为：</p>
<p><span class="math display">\[
min \quad\mathcal{L}(w,b)
\]</span></p>
<p><span class="math display">\[
权重更新：w^{*} = w-\eta \frac{ \partial \mathcal{L}(w,b)}{ \partial w }
\]</span></p>
<p>添加L2范数的惩罚项： <span class="math display">\[
min \quad\mathcal{L}(w,b)+\frac{\lambda}{2}\Vert w \Vert^2
\]</span></p>
<p><span class="math display">\[
权重更新：w^{*} = w-\eta \frac{ \partial
(\mathcal{L}(w,b)+\frac{\lambda}{2}\Vert w \Vert^2)}{ \partial w }
=w-\eta\frac{ \partial \mathcal{L}(w,b)}{ \partial w }-\eta\lambda w =
(1-\eta\lambda)w-\eta \frac{ \partial \mathcal{L}(w,b)}{ \partial w }
\]</span></p>
<p>其中<span class="math inline">\(\eta
\lambda&gt;0\)</span>,增加惩罚项之后的权重更新，会比更新之前的权重影响更小。</p>
<h3 id="权重衰退过程">权重衰退过程</h3>
<p>如图所示，实线椭圆表示没有正则化目标的等值线，虚线圆圈表示<span class="math inline">\(L2\)</span> 正则化项的等值线。当<span class="math inline">\(\lambda=0\)</span>时，惩罚项不发生作用，损失函数最优解为实线椭圆中点，当<span class="math inline">\(\lambda&gt;0\)</span>时，惩罚项对目标函数值有一个向圆心的拉力<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img data-src="https://s2.loli.net/2022/03/15/iVeZbUAQ6rxPz8L.png"></p>
<h2 id="代码实现">代码实现</h2>
<p>接下来通过线性回归的实验来验证权重衰退的效果。以下列线性函数为例，并为其增加一个均值为0，标准差为0.01的高斯噪声，为了让网络出现过拟合，将输入样本维度增大，设置为200，将数据集减小到20个样本数量。
<span class="math display">\[
y=0.05+\sum_{i=1}^{d} 0.01 x_{i}+\epsilon \text { where } \epsilon \sim
\mathcal{N}\left(0,0.01^{2}\right)
\]</span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> d2l <span class="im">import</span> torch <span class="im">as</span> d2l</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>n_train, n_test, num_inputs, batch_size <span class="op">=</span> <span class="dv">20</span>, <span class="dv">100</span>, <span class="dv">200</span>, <span class="dv">5</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>true_w, true_b <span class="op">=</span> torch.ones((num_inputs, <span class="dv">1</span>)) <span class="op">*</span> <span class="fl">0.01</span>, <span class="fl">0.05</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>train_data <span class="op">=</span> d2l.synthetic_data(true_w, true_b, n_train)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>train_iter <span class="op">=</span> d2l.load_array(train_data, batch_size)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>test_data <span class="op">=</span> d2l.synthetic_data(true_w, true_b, n_test)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>test_iter <span class="op">=</span> d2l.load_array(test_data, batch_size, is_train<span class="op">=</span><span class="va">False</span>)</span></code></pre></div>
<h3 id="初始化模型参数">初始化模型参数</h3>
<p>随机初始化模型的初始权重和偏置</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> init_params():</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    w <span class="op">=</span> torch.normal(<span class="dv">0</span>, <span class="dv">1</span>, size<span class="op">=</span>(num_inputs, <span class="dv">1</span>), requires_grad<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    b <span class="op">=</span> torch.zeros(<span class="dv">1</span>, requires_grad<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [w, b]</span></code></pre></div>
<h3 id="定义l2范数惩罚">定义L2范数惩罚</h3>
<p>对权重求平方后并将它们求和，然后除以2(用于抵消权重更新时的系数)。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> l2_penalty(w):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> torch.<span class="bu">sum</span>(w.<span class="bu">pow</span>(<span class="dv">2</span>)) <span class="op">/</span> <span class="dv">2</span></span></code></pre></div>
<h3 id="网络训练">网络训练</h3>
<p>将模型拟合训练数据集，并在测试数据集上进行评估。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> train(lambd):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    w, b <span class="op">=</span> init_params()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    net, loss <span class="op">=</span> <span class="kw">lambda</span> X: d2l.linreg(X, w, b), d2l.squared_loss</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    num_epochs, lr <span class="op">=</span> <span class="dv">100</span>, <span class="fl">0.003</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    animator <span class="op">=</span> d2l.Animator(xlabel<span class="op">=</span><span class="st">&#39;epochs&#39;</span>, ylabel<span class="op">=</span><span class="st">&#39;loss&#39;</span>, yscale<span class="op">=</span><span class="st">&#39;log&#39;</span>,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>                            xlim<span class="op">=</span>[<span class="dv">5</span>, num_epochs], legend<span class="op">=</span>[<span class="st">&#39;train&#39;</span>, <span class="st">&#39;test&#39;</span>])</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> epoch <span class="kw">in</span> <span class="bu">range</span>(num_epochs):</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> X, y <span class="kw">in</span> train_iter:</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 增加了L2范数惩罚项，</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 广播机制使l2_penalty(w)成为一个长度为batch_size的向量</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            l <span class="op">=</span> loss(net(X), y) <span class="op">+</span> lambd <span class="op">*</span> l2_penalty(w)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            l.<span class="bu">sum</span>().backward()</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            d2l.sgd([w, b], lr, batch_size)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (epoch <span class="op">+</span> <span class="dv">1</span>) <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>            animator.add(epoch <span class="op">+</span> <span class="dv">1</span>, (d2l.evaluate_loss(net, train_iter, loss),</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>                                     d2l.evaluate_loss(net, test_iter, loss)))</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;w的L2范数是：&#39;</span>, torch.norm(w).item())</span></code></pre></div>
<h2 id="验证">验证</h2>
<h3 id="忽略正则化直接训练">忽略正则化直接训练</h3>
<p>用<code>lambd = 0</code>禁用权重衰减后运行</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>train(lambd<span class="op">=</span><span class="dv">0</span>)</span></code></pre></div>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/output_weight-decay_ec9cc0_66_1.svg"></p>
<p>此时，这里训练误差有了减少，但测试误差没有减少，
这意味着出现了严重的过拟合。</p>
<h3 id="使用权重衰减">使用权重衰减</h3>
<p>使用权重衰减来运行代码。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>train(lambd<span class="op">=</span><span class="dv">3</span>)</span></code></pre></div>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/output_weight-decay_ec9cc0_78_1.svg"></p>
<p>在这里训练误差增大，但测试误差减小。
这正是我们期望从正则化中得到的效果。</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>当损失函数沿图中箭头所指方向走，损失函数值会增加，但同时惩罚项会减小，但是在椭圆中心点处，损失函数增加的速度小于惩罚项减小的速度，所以在箭头方向整体呈现减小趋势，直到新的点处（图中蓝色点）达到平衡<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>工业项目经验</title>
    <url>/2021/06/08/%E5%B7%A5%E4%B8%9A%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="案例一卢氏县政府谷电供暖设备主要负责人"><strong>案例一：卢氏县政府谷电供暖设备（主要负责人）</strong></h3>
<h4 id="项目简介"><strong>项目简介：</strong></h4>
<p>主要负责三门峡卢氏县县政府、法院、县委大楼三处地区的供暖设备，根据现场已有配电，梳理电气原理图，并设计控制方案。采用S7-200smart
PLC对供暖管网进行控制，主要逻辑为利用夜间谷电时间对储水进行加热，白天利用加热水对办公楼进行供暖。设计MCGS组态界面，可以对管网回路进行调整和主备切换，并且可以直接将耗电数据等导出到外部存储设备，方便进行电力结算。</p>
<h4 id="项目展示"><strong>项目展示：</strong></h4>
<p><img data-src="https://s2.loli.net/2022/03/18/aixuDzbkeHdQjE8.png"></p>
<p><img data-src="https://s2.loli.net/2022/03/18/giK8uCYp9qGAHTk.png"></p>
<p><img data-src="https://s2.loli.net/2022/03/18/X8qPptOEWv6Uzo3.png"></p>
<p><img data-src="https://s2.loli.net/2022/03/18/24KQszBToxZRgyV.png"></p>
<h3 id="案例二-燃气模温机设备电控部分独立完成人"><strong>案例二:</strong>
<strong>燃气模温机设备电控部分（独立完成人）</strong></h3>
<h4 id="项目简介-1">项目简介：</h4>
<p>根据客户要求，完成对燃气模温机设备的电路设计、控制程序以及上位机设计等任务。内容包括使用信捷PLC对燃气模温机的点火流程进行控制，并设置有管道超温超压、燃气压力、风压等多重保护机制，防止发生意外。应客户要求，上位机还编写有定时开机功能以及分期付款等功能，程序投入使用到目前已有3年时间，期间所有设备均正常运行。</p>
<h4 id="项目展示-1">项目展示：</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220318114354773.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220318114421012.png"></p>
<h3 id="案例三广东穗丰集团小麦日产1000t生产线主要负责人"><strong>案例三：广东穗丰集团小麦日产1000T</strong>**生产线（主要负责人）</h3>
<h4 id="项目简介-2">项目简介：</h4>
<p>主要负责生产线3台S7-1500 PLC 与 2台S7-200smart
PLC的组网，以及PLC部分编程工作和完整的Wincc界面开发，Wincc设计过程中加入了很多脚本功能以减轻PLC的任务量，项目本身规模较大。在项目中，还解决了与另外正在投产中B线的联动问题。</p>
<h4 id="项目展示-2">项目展示：</h4>
<p><img data-src="https://s2.loli.net/2022/03/18/WJZY2ExQfGTdw3F.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220318114207925.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220318114226256.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220318114239053.png"></p>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
  </entry>
  <entry>
    <title>抑制过拟合方法II-丢弃法</title>
    <url>/2022/01/09/%E6%8A%91%E5%88%B6%E8%BF%87%E6%8B%9F%E5%90%88%E6%96%B9%E6%B3%95II-%E4%B8%A2%E5%BC%83%E6%B3%95/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习环境配置(Windows)</title>
    <url>/2021/12/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装nvida驱动以及cuda">1.安装Nvida驱动以及CUDA</h2>
<h5 id="nvida安装">Nvida安装</h5>
<p>根据自己电脑显卡型号，在<a href="%5B官方驱动%20%7C%20NVIDIA%5D(https://www.nvidia.cn/Download/index.aspx?lang=cn)">Nvida官网</a>安装对应的显卡驱动，安装过程全部Next.</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220212221129544-16464832328741.png"></p>
<h5 id="cuda安装与配置">CUDA安装与配置</h5>
<p>在<a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA
Toolkit Archive | NVIDIA
Developer</a>下载cuda套件。推荐安装11.5之前的版本，以免跟后续支持包的版本不一致。全程默认安装，安装完成后重启电脑，在命令终端中输入</p>
<pre class="shell"><code>nvidia-smi</code></pre>
<p>结果如下图：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306220046115.png"></p>
<p>安装成功后在我的电脑上右键，<strong>打开属性==&gt;高级系统设置==&gt;高级==&gt;环境变量</strong>，按照下图添加环境变量：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306222136907.png"></p>
<p>第一阶段完成！</p>
<h2 id="加载cudnn加速包">2.加载cuDNN加速包</h2>
<h5 id="cudnn下载及配置">cudNN下载及配置</h5>
<p>在<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN
Archive | NVIDIA Developer</a>下载cuDNN深度神经网络的GPU加速库，
<strong>注意！</strong>，cuDNN是一个支持包，并不是可执行文件，选择zip格式进行下载。由于我安装的CUDA11.6目前还没有适配版本的cudNN库，我选择接近的11.5版本，建议同上，选择11.5以前的版本，方便版本统一，兼容性和稳定性会更好。<img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306220818216.png">下载完成后，解压压缩包，得到一个名字为cuda的文件夹，然后将里面<code>bin</code>、<code>include</code>和<code>lib</code>文件夹的内容拷贝到CUDA安装目录的相应文件夹中即可（CUDA默认安装目录为：<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6</code>)</p>
<h2 id="安装anaconda环境">3.安装Anaconda环境</h2>
<h5 id="安装anaconda">安装Anaconda</h5>
<p>从<a href="https://www.anaconda.com/">Anaconda</a>下载安装即可</p>
<h5 id="创建虚拟环境">创建虚拟环境</h5>
<p>在Anaconda创建虚拟环境有两种方法：</p>
<ul>
<li><p>命令行创建</p>
<p>打开<code>Anaconda Prompt</code>命令窗口，输入：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>conda create <span class="op">-</span>n DeepLearning python<span class="op">=</span><span class="fl">3.9</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>创建了一个叫做DeepLearning的空间 用的是python3<span class="fl">.9</span><span class="er">版本作为解释器</span></span></code></pre></div></li>
<li><p>Anaconda Navigator中创建</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306224310162.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306224403281.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306224455661.png"></p>
<p>设置环境名称，选择python版本，点击创建即可</p></li>
</ul>
<p>此时打开<code>Anaconda Prompt</code>输入：</p>
<pre class="shell"><code>activate DeepLearning</code></pre>
<p>此时已经切换到了我们刚才创建好的环境</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306225115211.png"></p>
<h5 id="安装pytorch">安装pytorch</h5>
<p>进入<a href="https://pytorch.org/get-started/locally/">PyTorch官网</a>，下载对应版本的pytorch，如果没有对应版本，就下载就接近的版本即可。如图：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306230032723.png"></p>
<p>将<code>conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</code>粘贴到激活的虚拟环境中进行安装即可。</p>
<h2 id="环境测试">4.环境测试</h2>
<p>设置jupyterLab解释器</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ChiXiaohang/Image/image-20220306230113252.png"></p>
<p>以下代码为CPU与GPU在张量运算下的速度测试：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(torch.__version__)        <span class="co"># 返回pytorch的版本</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(torch.cuda.is_available())        <span class="co"># 当CUDA可用时返回True</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> torch.randn(<span class="dv">10000</span>, <span class="dv">10000</span>)    <span class="co"># 返回10000行10000列的张量矩阵</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> torch.randn(<span class="dv">10000</span>, <span class="dv">5000</span>)     <span class="co"># 返回10000行5000列的张量矩阵</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>t0 <span class="op">=</span> time.time()        <span class="co"># 记录时间</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> torch.matmul(a, b)      <span class="co"># 矩阵乘法运算</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>t1 <span class="op">=</span> time.time()        <span class="co"># 记录时间</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(a.device, t1 <span class="op">-</span> t0)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>device <span class="op">=</span> torch.device(<span class="st">&#39;cuda&#39;</span>)       <span class="co"># 用GPU来运行</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> a.to(device)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> b.to(device)</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 初次调用GPU，需要数据传送，因此比较慢</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>t0 <span class="op">=</span> time.time()</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> torch.matmul(a, b)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>t2 <span class="op">=</span> time.time()</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="co"># 这才是GPU处理数据的真实运行时间，当数据量越大，GPU的优势越明显</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>t0 <span class="op">=</span> time.time()</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> torch.matmul(a, b)</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>t2 <span class="op">=</span> time.time()</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(a.device, t2 <span class="op">-</span> t0)</span></code></pre></div>
<p>输出：</p>
<p><code>cpu 7.230173587799072</code></p>
<p><code>cuda:0 0.0009875297546386719</code></p>
<p>同一张量运算，GPU是CPU处理速度的成百上千倍。在深度学习网络中，模型规模越庞大，网络层数越深，GPU的速度优势就愈发明显。</p>
<p>至此，GPU配置工作完成，可以开启愉快的炼丹之旅了！</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
